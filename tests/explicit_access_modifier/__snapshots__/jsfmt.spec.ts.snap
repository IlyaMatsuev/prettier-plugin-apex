// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Format apex: ExplicitAccessModifier.cls: ExplicitAccessModifier.cls 1`] = `
with sharing @IsTest class ExplicitAccessModifier
{
    public final HttpRequest request;
    private static final HttpRequest request;
    static final HttpRequest request;
    static final transient HttpRequest request;

    List<String> a = new List<String>();
    String firstString, secondString;
    String a = 'aaa', b = 'bbb';

    public String nonDefaultSetter {
        private get;

        set {
            nonDefaultSetter = value;
        }
    }

    public final   String nonDefaultGetterSetter {
        protected get {
            return nonDefaultGetterSetter;
        }

        private set {
            nonDefaultGetterSetter = value;
        }
    }

    @TestVisible String nonDefaultGetterSetter {
        get {
            if (nonDefaultGetterSetter != '') {
                nonDefaultGetterSetter = '';
            }
            return nonDefaultGetterSetter;
        }

        private set {
            nonDefaultGetterSetter = value;
        }
    }

    static final transient String nonDefaultGetterSetter {
        get {
            if (nonDefaultGetterSetter != '') {
                nonDefaultGetterSetter = '';
            }
            return nonDefaultGetterSetter;
        }

        set {
            System.debug('qqq');
            nonDefaultGetterSetter = value;
        }
    }

    @TestVisible
    final static List<UnknownClass.InnerClass> nestedList = new List<UnknownClass.InnerClass>();

    public abstract class NestedClassTest {
        String nonDefaultSetter {
            private get;

            set {
            nonDefaultSetter = value;
            }
        }

        transient String nonDefaultSetter {
            private get;

            set {
            nonDefaultSetter = value;
            }
        }

        @IsTest public transient String nonDefaultSetter {
            private get;

            set {
            nonDefaultSetter = value;
            }
        }
        
        void methodOne() {
            Integer w;
        }

        @TestVisible abstract void methodTwo();
    }

    interface InterfaceTest {
        void methodOne();
        void methodTwo();
    }

    private interface InterfaceTest2 {
        void methodOne();
        void methodTwo();
    }

    @JsonAccess
    class EnumTest {
        public enum Season {WINTER, SPRING, SUMMER, FALL}
        enum Month {JANUARY}

        @TestVisible
        private enum AccountTypeOne {
            BUSINESS_ACCOUNT,
            PERSON_ACCOUNT
        }

        @TestVisible public enum AccountTypeTwo {
            BUSINESS_ACCOUNT,
            PERSON_ACCOUNT
        }

        @TestVisible static enum AccountTypeTwo {
            BUSINESS_ACCOUNT,
            PERSON_ACCOUNT
        }

        @TestVisible enum AccountTypeThree {
            BUSINESS_ACCOUNT,
            PERSON_ACCOUNT
        }

        void enumTest() {
            final Integer i = Season.WINTER.ordinal();
            String s = Season.SPRING.name();
            final Season[] values = Season.values();
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@IsTest
private with sharing class ExplicitAccessModifier {
  public final HttpRequest request;
  private static final HttpRequest request;
  private static final HttpRequest request;
  private static final transient HttpRequest request;

  private List<String> a = new List<String>();
  private String firstString, secondString;
  private String a = 'aaa', b = 'bbb';

  public String nonDefaultSetter {
    private get;
    set {
      nonDefaultSetter = value;
    }
  }

  public final String nonDefaultGetterSetter {
    protected get {
      return nonDefaultGetterSetter;
    }
    private set {
      nonDefaultGetterSetter = value;
    }
  }

  @TestVisible
  private String nonDefaultGetterSetter {
    get {
      if (nonDefaultGetterSetter != '') {
        nonDefaultGetterSetter = '';
      }
      return nonDefaultGetterSetter;
    }
    private set {
      nonDefaultGetterSetter = value;
    }
  }

  private static final transient String nonDefaultGetterSetter {
    get {
      if (nonDefaultGetterSetter != '') {
        nonDefaultGetterSetter = '';
      }
      return nonDefaultGetterSetter;
    }
    set {
      System.debug('qqq');
      nonDefaultGetterSetter = value;
    }
  }

  @TestVisible
  private final static List<UnknownClass.InnerClass> nestedList = new List<UnknownClass.InnerClass>();

  public abstract class NestedClassTest {
    private String nonDefaultSetter {
      private get;
      set {
        nonDefaultSetter = value;
      }
    }

    private transient String nonDefaultSetter {
      private get;
      set {
        nonDefaultSetter = value;
      }
    }

    @IsTest
    public transient String nonDefaultSetter {
      private get;
      set {
        nonDefaultSetter = value;
      }
    }

    private void methodOne() {
      Integer w;
    }

    @TestVisible
    private abstract void methodTwo();
  }

  private interface InterfaceTest {
    void methodOne();
    void methodTwo();
  }

  private interface InterfaceTest2 {
    void methodOne();
    void methodTwo();
  }

  @JsonAccess
  private class EnumTest {
    public enum Season {
      WINTER,
      SPRING,
      SUMMER,
      FALL
    }
    private enum Month {
      JANUARY
    }

    @TestVisible
    private enum AccountTypeOne {
      BUSINESS_ACCOUNT,
      PERSON_ACCOUNT
    }

    @TestVisible
    public enum AccountTypeTwo {
      BUSINESS_ACCOUNT,
      PERSON_ACCOUNT
    }

    @TestVisible
    private static enum AccountTypeTwo {
      BUSINESS_ACCOUNT,
      PERSON_ACCOUNT
    }

    @TestVisible
    private enum AccountTypeThree {
      BUSINESS_ACCOUNT,
      PERSON_ACCOUNT
    }

    private void enumTest() {
      final Integer i = Season.WINTER.ordinal();
      String s = Season.SPRING.name();
      final Season[] values = Season.values();
    }
  }
}

`;
